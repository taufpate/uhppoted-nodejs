const describe = require('mocha').describe
const before = require('mocha').before
const after = require('mocha').after
const it = require('mocha').it
const expect = require('chai').expect

const dgram = require('dgram')
const uhppoted = require('../index.js')

describe('#getDevices(...)', function () {
  const replies = [
    Buffer.from([
      0x17, 0x94, 0x00, 0x00, 0x90, 0x53, 0xfb, 0x0b, 0xc0, 0xa8, 0x01, 0x65, 0xff, 0xff, 0xff, 0x00,
      0xc0, 0xa8, 0x01, 0x01, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x06, 0x62, 0x20, 0x20, 0x01, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]),

    Buffer.from([
      0x17, 0x94, 0x00, 0x00, 0x41, 0x78, 0x1e, 0x12, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
      0xc0, 0xa8, 0x01, 0x01, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x08, 0x92, 0x20, 0x19, 0x08, 0x15,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]),

    Buffer.from([
      0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
      0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ])
  ]

  let sock = null
  const bind = '0.0.0.0'
  const listen = '0.0.0.0:60001'
  let broadcast = '255.255.255.255:59999'

  before(function () {
    const args = process.argv.slice(3)

    args.forEach(arg => {
      const re = /(--broadcast)=(.*)/gm
      const matches = re.exec(arg)

      if (matches && matches.length === 3) {
        switch (matches[1]) {
          case '--broadcast':
            broadcast = matches[2]
            break
        }
      }
    })

    sock = dgram.createSocket({ type: 'udp4', reuseAddr: true })

    sock.on('message', (message, rinfo) => {
      replies.forEach(reply => {
        sock.send(new Uint8Array(reply, 0, 64, rinfo.port, rinfo.address))
      })
    })

    sock.bind({ address: '0.0.0.0', port: 59999 })
  })

  after(function () {
    sock.close()
  })

  it('should execute get-devices', function (done) {
    this.timeout(10000)

    const expected = [
      {
        deviceId: 201020304,
        device: {
          serialNumber: 201020304,
          address: '192.168.1.101',
          netmask: '255.255.255.0',
          gateway: '192.168.1.1',
          MAC: '52:fd:fc:07:21:82',
          version: '0662',
          date: '2020-01-01'
        }
      },
      {
        deviceId: 303986753,
        device: {
          serialNumber: 303986753,
          address: '192.168.1.100',
          netmask: '255.255.255.0',
          gateway: '192.168.1.1',
          MAC: '52:fd:fc:07:21:82',
          version: '0892',
          date: '2019-08-15'
        }
      },
      {
        deviceId: 405419896,
        device: {
          serialNumber: 405419896,
          address: '192.168.1.100',
          netmask: '255.255.255.0',
          gateway: '192.168.1.1',
          MAC: '00:12:23:34:45:56',
          version: '0892',
          date: '2018-11-05'
        }
      }
    ]

    const config = new uhppoted.Config('integration-tests', bind, broadcast, listen, 5000, [], false)
    const ctx = { config: config }

    uhppoted.getDevices(ctx)
      .then(response => {
        expect(response).to.deep.equal(expected)
        done()
      })
      .catch(err => done(err))
  })
})
